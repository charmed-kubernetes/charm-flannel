name: Run tests with Tox

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  call-inclusive-naming-check:
    name: Inclusive naming
    uses: canonical-web-and-design/Inclusive-naming/.github/workflows/woke.yaml@main
    with:
      fail-on-error: "true"

  validate-wheelhouse:
    name: Validate Wheelhouse
    uses: charmed-kubernetes/workflows/.github/workflows/validate-wheelhouse.yaml@main

  lint-unit:
    name: Lint Unit
    uses: charmed-kubernetes/workflows/.github/workflows/lint-unit.yaml@main

  resources-build:
    name: Build Resources with docker
    runs-on: ubuntu-22.04
    needs:
      - lint-unit
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Docker
        run:  sudo snap install docker
      - name: Build Resources
        run:  sudo ./build-flannel-resources.sh
      - name: Upload resource artifact
        uses: actions/upload-artifact@v3
        with:
          name: flannel-resources
          path: ./flannel*.tar.gz

  integration-tests:
    name: Integration test with Vsphere
    runs-on: self-hosted
    timeout-minutes: 60
    needs:
      - resources-build
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: vsphere
          juju-channel: 3.1/stable
          credentials-yaml: ${{ secrets.CREDENTIALS_YAML }}
          clouds-yaml: ${{ secrets.CLOUDS_YAML }}
          bootstrap-options: "${{ secrets.FOCAL_BOOTSTRAP_OPTIONS }} --model-default datastore=vsanDatastore --model-default primary-network=VLAN_2764"
          bootstrap-constraints: "arch=amd64 cores=2 mem=4G"

      - name: Download resource artifacts
        uses: actions/download-artifact@v3
        with:
          name: flannel-resources

      - name: Run integration test
        run: tox -e integration -- --basetemp=/home/ubuntu/pytest

      - name: Setup Debug Artifact Collection
        if: failure()
        run: mkdir tmp

      - name: Collect Juju Logs
        if: failure()
        run: juju debug-log --replay --no-tail | tee tmp/juju-status.txt

      - name: Upload debug artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: test-run-artifacts
          path: tmp
